// 最大二叉树
public class constructMaximumBinaryTree1701 {
    public static void main(String[] args) {
        int[] nums = new int[]{3, 2, 1, 6, 0, 5};
        constructMaximumBinaryTree(nums);
    }

    public static TreeNode constructMaximumBinaryTree(int[] nums) {
        return constructMaximumBinaryTree1(nums, 0, nums.length);
    }

    public static TreeNode constructMaximumBinaryTree1(int[] nums, int leftIndex, int rightIndex) {
        if (rightIndex - leftIndex < 1) {// 没有元素了
            return null;
        }
        if (rightIndex - leftIndex == 1) {// 只有一个元素
            return new TreeNode(nums[leftIndex]);
        }
        int maxIndex = leftIndex;// 最大值所在位置
        int maxVal = nums[maxIndex];// 最大值
        for (int i = leftIndex + 1; i < rightIndex; i++) {
            if (nums[i] > maxVal){
                maxVal = nums[i];
                maxIndex = i;
            }
        }
        TreeNode root = new TreeNode(maxVal);
        // 根据maxIndex划分左右子树
        root.left = constructMaximumBinaryTree1(nums, leftIndex, maxIndex);
        root.right = constructMaximumBinaryTree1(nums, maxIndex + 1, rightIndex);
        return root;
    }
}


//合并二叉树
public class MergeTrees1702 {

    // 递归
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null) return root2;
        if (root2 == null) return root1;

        root1.val += root2.val;
        root1.left = mergeTrees(root1.left,root2.left);
        root1.right = mergeTrees(root1.right,root2.right);
        return root1;
    }

}

// 二叉搜索树

public class SearchBST1703 {

    // 递归，普通二叉树
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null || root.val == val) {
            return root;
        }
        TreeNode left = searchBST(root.left, val);
        if (left != null) {
            return left;
        }
        return searchBST(root.right, val);
    }

    // 二叉搜索树是一个有序树：
    //
    //若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
    //若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
    //它的左、右子树也分别为二叉搜索树

    // 递归，利用二叉搜索树特点，优化
    public TreeNode searchBST1(TreeNode root, int val) {
        if (root == null || root.val == val) {
            return root;
        }
        if (val < root.val) {
            return searchBST1(root.left, val);
        } else {
            return searchBST1(root.right, val);
        }
    }

    // 迭代，普通二叉树
    public TreeNode searchBST2(TreeNode root, int val) {
        if (root == null || root.val == val) {
            return root;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode pop = stack.pop();
            if (pop.val == val) {
                return pop;
            }
            if (pop.right != null) {
                stack.push(pop.right);
            }
            if (pop.left != null) {
                stack.push(pop.left);
            }
        }
        return null;
    }

    // 迭代，利用二叉搜索树特点，优化，可以不需要栈
    public TreeNode searchBST3(TreeNode root, int val) {
        while (root != null) {
            if (val < root.val) root = root.left;
            else if (val > root.val) root = root.right;
            else return root;
        }
        return null;
    }
}

//验证二叉搜索树 

public class IsValidBST1704 {

    public static void main(String[] args) {

        int[] nums = new int[]{3, 2, 1, 6, 0, 5};

        //System.out.println(isValidBST(new TreeNode(3, new TreeNode(2), new TreeNode(1, new TreeNode(6)))));
        System.out.println(isValidBST(new TreeNode(2, new TreeNode(1), new TreeNode(3))));

        System.out.println(isValidBST3(new TreeNode(2, new TreeNode(1), new TreeNode(3))));
    }

    // 递归
    static TreeNode max;
    public static boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        // 左
        boolean left = isValidBST(root.left);
        if (!left) {
            return false;
        }
        // 中
        if (max != null && root.val <= max.val) {
            return false;
        }
        max = root;
        // 右
        boolean right = isValidBST(root.right);
        return right;
    }


    public boolean isValidBST1(TreeNode root) {
        return validBST1(Long.MIN_VALUE, Long.MAX_VALUE, root);
    }
    boolean validBST1(long lower, long upper, TreeNode root) {
        if (root == null) return true;
        if (root.val <= lower || root.val >= upper) return false;
        return validBST1(lower, root.val, root.left) && validBST1(root.val, upper, root.right);
    }

    private static long prev = Long.MIN_VALUE;
    public static boolean isValidBST3(TreeNode root) {
        if (root == null) {
            return true;
        }
        if (!isValidBST3(root.left)) {
            return false;
        }
        if (root.val <= prev) { // 不满足二叉搜索树条件
            return false;
        }
        prev = root.val;
        return isValidBST3(root.right);
    }

}

